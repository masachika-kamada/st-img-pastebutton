{"ast":null,"code":"var _jsxFileName = \"/Users/suzuki/Desktop/st-img-pastebutton/st_img_pastebutton/frontend/src/MyComponent.tsx\";\nimport React from \"react\";\nimport { Streamlit, StreamlitComponentBase, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass ImageClipboardComponent extends StreamlitComponentBase {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      imageData: null,\n      error: null\n    };\n    this.handleButtonClick = async () => {\n      try {\n        const clipboardItems = await navigator.clipboard.read();\n        let imageFound = false;\n        for (const clipboardItem of clipboardItems) {\n          // Check for common image formats\n          const imageType = clipboardItem.types.find(type => type.startsWith(\"image/\"));\n          if (imageType) {\n            const blob = await clipboardItem.getType(imageType);\n            const reader = new FileReader();\n            reader.onloadend = () => {\n              this.setState({\n                imageData: reader.result,\n                error: null\n              }, () => {\n                Streamlit.setComponentValue(this.state.imageData);\n              });\n            };\n            reader.readAsDataURL(blob);\n            imageFound = true;\n            break;\n          }\n        }\n        if (!imageFound) {\n          this.setState({\n            error: \"No image found in the clipboard.\"\n          });\n        }\n      } catch (err) {\n        if (err instanceof DOMException && err.name === \"NotAllowedError\") {\n          // Ignore the error if it's a user cancellation or permission denial\n          console.log(\"Clipboard access denied or cancelled by the user.\");\n        } else if (err instanceof Error) {\n          // If it's an Error instance, we can get a detailed error message\n          this.setState({\n            error: \"Failed to read the image. Details: \" + err.message\n          });\n          console.error(\"Failed to read clipboard contents: \", err.message);\n        } else {\n          // If it's not an Error instance, display a generic error message\n          this.setState({\n            error: \"Failed to read the image.\"\n          });\n          console.error(\"Failed to read clipboard contents\");\n        }\n      }\n    };\n    this.render = () => {\n      const label = String(this.props.args[\"label\"]);\n      const {\n        error\n      } = this.state;\n\n      // Style definition resembling Streamlit's default button style\n      const buttonStyle = {\n        backgroundColor: \"#ffffff\",\n        // background color (white)\n        color: \"black\",\n        // text color (black)\n        padding: \"5px 10px\",\n        border: \"1px solid #cccccc\",\n        // border color (grey)\n        borderRadius: \"8px\",\n        // rounded corners\n        cursor: \"pointer\",\n        fontSize: \"14px\",\n        outline: \"none\",\n        // disable outline on focus\n        transition: \"color 0.3s, border-color 0.3s\" // add transition for color and border color\n      };\n\n      // Hover style\n      const buttonHoverStyle = {\n        color: \"red\",\n        // text color on hover (red)\n        borderColor: \"red\" // border color on hover (red)\n      };\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButtonClick,\n          style: buttonStyle,\n          onMouseEnter: e => {\n            Object.assign(e.currentTarget.style, buttonHoverStyle);\n          },\n          onMouseLeave: e => {\n            Object.assign(e.currentTarget.style, buttonStyle);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            color: \"red\"\n          },\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this);\n    };\n  }\n}\nexport default _c = withStreamlitConnection(ImageClipboardComponent);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Streamlit","StreamlitComponentBase","withStreamlitConnection","jsxDEV","_jsxDEV","ImageClipboardComponent","constructor","args","state","imageData","error","handleButtonClick","clipboardItems","navigator","clipboard","read","imageFound","clipboardItem","imageType","types","find","type","startsWith","blob","getType","reader","FileReader","onloadend","setState","result","setComponentValue","readAsDataURL","err","DOMException","name","console","log","Error","message","render","label","String","props","buttonStyle","backgroundColor","color","padding","border","borderRadius","cursor","fontSize","outline","transition","buttonHoverStyle","borderColor","children","onClick","style","onMouseEnter","e","Object","assign","currentTarget","onMouseLeave","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/suzuki/Desktop/st-img-pastebutton/st_img_pastebutton/frontend/src/MyComponent.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\";\n\ninterface State {\n  imageData: string | null;\n  error: string | null;\n}\n\nclass ImageClipboardComponent extends StreamlitComponentBase<State> {\n  public state: State = { imageData: null, error: null };\n\n  private handleButtonClick = async (): Promise<void> => {\n    try {\n      const clipboardItems = await navigator.clipboard.read();\n      let imageFound = false;\n      for (const clipboardItem of clipboardItems) {\n        // Check for common image formats\n        const imageType = clipboardItem.types.find(type => type.startsWith(\"image/\"));\n        if (imageType) {\n          const blob = await clipboardItem.getType(imageType);\n          const reader = new FileReader();\n          reader.onloadend = () => {\n            this.setState({ imageData: reader.result as string, error: null }, () => {\n              Streamlit.setComponentValue(this.state.imageData);\n            });\n          };\n          reader.readAsDataURL(blob);\n          imageFound = true;\n          break;\n        }\n      }\n\n      if (!imageFound) {\n        this.setState({ error: \"No image found in the clipboard.\" });\n      }\n    } catch (err) {\n      if (err instanceof DOMException && err.name === \"NotAllowedError\") {\n        // Ignore the error if it's a user cancellation or permission denial\n        console.log(\"Clipboard access denied or cancelled by the user.\");\n      } else if (err instanceof Error) {\n        // If it's an Error instance, we can get a detailed error message\n        this.setState({ error: \"Failed to read the image. Details: \" + err.message });\n        console.error(\"Failed to read clipboard contents: \", err.message);\n      } else {\n        // If it's not an Error instance, display a generic error message\n        this.setState({ error: \"Failed to read the image.\" });\n        console.error(\"Failed to read clipboard contents\");\n      }\n    }\n  };\n\n  public render = (): React.ReactNode => {\n    const label = String(this.props.args[\"label\"])\n    const { error } = this.state;\n\n    // Style definition resembling Streamlit's default button style\n    const buttonStyle = {\n      backgroundColor: \"#ffffff\", // background color (white)\n      color: \"black\", // text color (black)\n      padding: \"5px 10px\",\n      border: \"1px solid #cccccc\", // border color (grey)\n      borderRadius: \"8px\", // rounded corners\n      cursor: \"pointer\",\n      fontSize: \"14px\",\n      outline: \"none\", // disable outline on focus\n      transition: \"color 0.3s, border-color 0.3s\", // add transition for color and border color\n    };\n\n    // Hover style\n    const buttonHoverStyle = {\n      color: \"red\", // text color on hover (red)\n      borderColor: \"red\", // border color on hover (red)\n    };\n\n    return (\n      <div>\n        <button\n          onClick={this.handleButtonClick}\n          style={buttonStyle}\n          onMouseEnter={e => {\n            Object.assign(e.currentTarget.style, buttonHoverStyle);\n          }}\n          onMouseLeave={e => {\n            Object.assign(e.currentTarget.style, buttonStyle);\n          }}\n        >\n          <label>{label}</label>\n        </button>\n        {error && <div style={{ color: \"red\" }}>{error}</div>}\n      </div>\n    );\n  };  \n}\n\nexport default withStreamlitConnection(ImageClipboardComponent);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}